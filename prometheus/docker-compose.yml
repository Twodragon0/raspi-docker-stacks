version: "3.3"

networks:
  net:
    driver: overlay
    attachable: true
  # traefik-public:
  #   driver: overlay
    # external: true

volumes:
    prometheus: {}
    grafana: {}
    alertmanager: {}

configs:
  node_rules:
    file: ./prometheus/rules/swarm_node.rules.yml
  task_rules:
    file: ./prometheus/rules/swarm_task.rules.yml
  grafana_datasource:
    file: ./grafana/datasources/prometheus.yaml
  grafana_provisioning_dashboards:
    file: ./grafana/swarmprom_dashboards.yml
  grafana_dashboards_nodes:
    file: ./grafana/dashboards/swarmprom-nodes-dash.json
  grafana_dashboards_prometheus:
    file: ./grafana/dashboards/swarmprom-prometheus-dash.json
  grafana_dashboards_services:
    file: ./grafana/dashboards/swarmprom-services-dash.json
  alert_manager:
    file: ./alertmanager/conf/prod.alertmanager.yml
  prometheus:
    file: ./prometheus/conf/prometheus.yml
  blackbox_exporter:
    file: ./blackbox-exporter/blackbox.yml
  traefik_htpasswd:
    file: ./traefik/htpasswd
  
    

services:
  traefik:
    image: traefik:v1.7.19-alpine
    ports:
      - target: 80
        published: 8080
        # mode: host
      - target: 443
        published: 4433
        # mode: host
      - target: 8080
        published: 8181
        # you can view the traefik's dashboard in http://swarmIP:8080
    command: >
      --api
      --docker
      --docker.swarmMode
      --docker.domain=${DOMAIN:-docker.localhost}
      --docker.watch
      --defaultentrypoints=http
      --entrypoints='Name:http Address::80'
      --entrypoints='Name:https Address::443 TLS'
      --logLevel=INFO
      --accessLog
      --metrics
      --metrics.prometheus
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    configs:
      - source: traefik_htpasswd
        target: /etc/htpasswd
    networks:
      # - traefik-public
      - net
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
  doh-status-probe:
    image: prom/blackbox-exporter
    networks:
      - net
    command:
      - '--config.file=/config/blackbox.yml'
    configs:
      - source: blackbox_exporter
        target: /config/blackbox.yml      
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 32M

  dockerd-exporter:
    image: jmb12686/socat
    networks:
      - net
    command: -d -d TCP-L:9323,fork TCP:172.18.0.1:9323
    deploy:
      mode: global
      resources:
        limits:
          memory: 32M

  cadvisor:
    image: jmb12686/cadvisor
    networks:
      - net
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 9094:8080
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    image: grafana/grafana:6.3.6
    networks:
      - net
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning/
      #- GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL:-localhost}
      #- GF_SMTP_ENABLED=${GF_SMTP_ENABLED:-false}
      #- GF_SMTP_FROM_ADDRESS=${GF_SMTP_FROM_ADDRESS:-grafana@test.com}
      #- GF_SMTP_FROM_NAME=${GF_SMTP_FROM_NAME:-Grafana}
      #- GF_SMTP_HOST=${GF_SMTP_HOST:-smtp:25}
      #- GF_SMTP_USER=${GF_SMTP_USER}
      #- GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}
    volumes:
      - grafana:/var/lib/grafana
    configs:
      - source: grafana_datasource
        target: /etc/grafana/provisioning/datasources/prometheus.yaml
      - source: grafana_provisioning_dashboards
        target: /etc/grafana/provisioning/dashboards/swarmprom_dashboards.yml
      - source: grafana_dashboards_nodes
        target: /etc/grafana/dashboards/swarmprom-nodes-dash.json
      - source: grafana_dashboards_prometheus
        target: /etc/grafana/dashboards/swarmprom-prometheus-dash.json
      - source: grafana_dashboards_services
        target: /etc/grafana/dashboards/swarmprom-services-dash.json        
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.backend=grafana"
        - "traefik.port=3000"
        - "traefik.docker.network=mon_net"
        - "traefik.entrypoints=http"
        - "traefik.frontend.rule=Host:grafana.home.local"                 
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  alertmanager:
    image: prom/alertmanager
    networks:
      - net
    environment:
      - SLACK_URL=${SLACK_URL:-https://hooks.slack.com/services/TOKEN}
      - SLACK_CHANNEL=${SLACK_CHANNEL:-general}
      - SLACK_USER=${SLACK_USER:-alertmanager}
    configs:
      - source: alert_manager
        target: /etc/alertmanager/alertmanager.yml
    command:
      - "--web.external-url=http://raspi-swarm.home.local:9093"
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.backend=alertmanager"
        - "traefik.port=9093"
        - "traefik.docker.network=mon_net"
        - "traefik.entrypoints=http"
        - "traefik.frontend.rule=Host:alertmanager.home.local"                 
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  node-exporter:
    image: jmb12686/node-exporter 
    networks:
      - net
    environment:
      - NODE_ID={{.Node.ID}}
    ports:
      - 9100:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename:ro
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--collector.textfile.directory=/etc/node-exporter/' 
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          memory: 32M

  prometheus:
    image: prom/prometheus
    networks:
      - net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      # - '--web.route-prefix=/prometheus/'
      # - '--web.external-url=http://raspi-swarm.home.local/prometheus'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=${PROMETHEUS_RETENTION:-72h}'
    volumes:
      - prometheus:/prometheus
    configs:
      - source: prometheus
        target: /etc/prometheus/prometheus.yml  
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
      - source: traefik_htpasswd
        target: /etc/htpasswd        
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.backend=prometheus"
        - "traefik.port=9090" #Prometheus port to register
        - "traefik.docker.network=mon_net"
        # - "traefik.backend=net"
        - "traefik.entrypoints=http"
        - "traefik.frontend.rule=Host:prometheus.home.local"    
        # - "traefik.frontend.auth.basic.usersFile=/etc/htpasswd"             
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 1048M
